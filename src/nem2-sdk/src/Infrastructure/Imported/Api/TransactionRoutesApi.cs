/* 
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using io.nem2.sdk.Infrastructure.Buffers.Model;
using io.nem2.sdk.Infrastructure.HttpRepositories;
using io.nem2.sdk.Infrastructure.Imported.Api.Client;
using io.nem2.sdk.Infrastructure.Mapping;
using io.nem2.sdk.Model.Transactions;
using RestSharp;

namespace io.nem2.sdk.Infrastructure.Imported.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface ITransactionRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announce a cosignature transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Object</returns>
        object AnnounceCosignatureTransaction (CosignatureSignedTransactionDTO payload);

        /// <summary>
        /// Creates cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announce a cosignature transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> AnnounceCosignatureTransactionWithHttpInfo (CosignatureSignedTransactionDTO payload);
        /// <summary>
        /// Creates partial transaction
        /// </summary>
        /// <remarks>
        /// Announce a partial transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Object</returns>
        TransactionAnnounceResponse AnnouncePartialTransaction (SignedTransaction payload);

        /// <summary>
        /// Creates partial transaction
        /// </summary>
        /// <remarks>
        /// Announce a partial transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<TransactionAnnounceResponse> AnnouncePartialTransactionWithHttpInfo (SignedTransaction payload);
        /// <summary>
        /// Creates new transaction
        /// </summary>
        /// <remarks>
        /// Announce a transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Object</returns>
        object AnnounceTransaction (SignedTransaction payload);

        /// <summary>
        /// Creates new transaction
        /// </summary>
        /// <remarks>
        /// Announce a transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> AnnounceTransactionWithHttpInfo (SignedTransaction payload);
        /// <summary>
        /// Get ransaction information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>Object</returns>
        object GetTransaction (string transactionId);

        /// <summary>
        /// Get ransaction information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> GetTransactionWithHttpInfo (string transactionId);
        /// <summary>
        /// Get transaction status
        /// </summary>
        /// <remarks>
        /// Returns transaction status for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>TransactionStatusDTO</returns>
        TransactionStatusDTO GetTransactionStatus (string hash);

        /// <summary>
        /// Get transaction status
        /// </summary>
        /// <remarks>
        /// Returns transaction status for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>ApiResponse of TransactionStatusDTO</returns>
        ApiResponse<TransactionStatusDTO> GetTransactionStatusWithHttpInfo (string hash);
        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<object> GetTransactions (TransactionIds transactionIds);

        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<object>> GetTransactionsWithHttpInfo (TransactionIds transactionIds);
        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>List&lt;TransactionStatusDTO&gt;</returns>
        List<TransactionStatusDTO> GetTransactionsStatuses (TransactionHashes transactionHashes);

        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>ApiResponse of List&lt;TransactionStatusDTO&gt;</returns>
        ApiResponse<List<TransactionStatusDTO>> GetTransactionsStatusesWithHttpInfo (TransactionHashes transactionHashes);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announce a cosignature transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<TransactionAnnounceResponse> AnnounceCosignatureTransactionAsync (CosignatureSignedTransactionDTO payload);

        /// <summary>
        /// Creates cosignature transaction
        /// </summary>
        /// <remarks>
        /// Announce a cosignature transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionAnnounceResponse>> AnnounceCosignatureTransactionAsyncWithHttpInfo (CosignatureSignedTransactionDTO payload);
        /// <summary>
        /// Creates partial transaction
        /// </summary>
        /// <remarks>
        /// Announce a partial transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<TransactionAnnounceResponse> AnnouncePartialTransactionAsync (SignedTransaction payload);

        /// <summary>
        /// Creates partial transaction
        /// </summary>
        /// <remarks>
        /// Announce a partial transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionAnnounceResponse>> AnnouncePartialTransactionAsyncWithHttpInfo (SignedTransaction payload);
        /// <summary>
        /// Creates new transaction
        /// </summary>
        /// <remarks>
        /// Announce a transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<TransactionAnnounceResponse> AnnounceTransactionAsync (SignedTransaction payload);

        /// <summary>
        /// Creates new transaction
        /// </summary>
        /// <remarks>
        /// Announce a transaction to the network
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionAnnounceResponse>> AnnounceTransactionAsyncWithHttpInfo (SignedTransaction payload);
        /// <summary>
        /// Get ransaction information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Transaction> GetTransactionAsync (string transactionId);

        /// <summary>
        /// Get ransaction information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> GetTransactionAsyncWithHttpInfo (string transactionId);
        /// <summary>
        /// Get transaction status
        /// </summary>
        /// <remarks>
        /// Returns transaction status for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>Task of TransactionStatusDTO</returns>
        System.Threading.Tasks.Task<TransactionStatusDTO> GetTransactionStatusAsync (string hash);

        /// <summary>
        /// Get transaction status
        /// </summary>
        /// <remarks>
        /// Returns transaction status for a given transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>Task of ApiResponse (TransactionStatusDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionStatusDTO>> GetTransactionStatusAsyncWithHttpInfo (string hash);
        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> GetTransactionsAsync (TransactionIds transactionIds);

        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> GetTransactionsAsyncWithHttpInfo (TransactionIds transactionIds);
        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>Task of List&lt;TransactionStatusDTO&gt;</returns>
        System.Threading.Tasks.Task<List<TransactionStatusDTO>> GetTransactionsStatusesAsync (TransactionHashes transactionHashes);

        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transaction information for a given set of transaction id or hash
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionStatusDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TransactionStatusDTO>>> GetTransactionsStatusesAsyncWithHttpInfo (TransactionHashes transactionHashes);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class TransactionRoutesApi : ITransactionRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionRoutesApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionRoutesApi(HttpRouter http, Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            if (http.Url == null) throw new NullReferenceException("Url cannot be null");
                Configuration.ApiClient = new ApiClient(http.Url);

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates cosignature transaction Announce a cosignature transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Object</returns>
        public object AnnounceCosignatureTransaction (CosignatureSignedTransactionDTO payload)
        {
             ApiResponse<object> localVarResponse = AnnounceCosignatureTransactionWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates cosignature transaction Announce a cosignature transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< object > AnnounceCosignatureTransactionWithHttpInfo (CosignatureSignedTransactionDTO payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TransactionRoutesApi->AnnounceCosignatureTransaction");

            var localVarPath = "/transaction/cosignature";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceCosignatureTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Creates cosignature transaction Announce a cosignature transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<TransactionAnnounceResponse> AnnounceCosignatureTransactionAsync (CosignatureSignedTransactionDTO payload)
        {
             ApiResponse<TransactionAnnounceResponse> localVarResponse = await AnnounceCosignatureTransactionAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates cosignature transaction Announce a cosignature transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionAnnounceResponse>> AnnounceCosignatureTransactionAsyncWithHttpInfo (CosignatureSignedTransactionDTO payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TransactionRoutesApi->AnnounceCosignatureTransaction");

            var localVarPath = "/transaction/cosignature";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
            "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceCosignatureTransaction", localVarResponse);

                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionAnnounceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionAnnounceResponse)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionAnnounceResponse)));
        }

        /// <summary>
        /// Creates partial transaction Announce a partial transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Object</returns>
        public TransactionAnnounceResponse AnnouncePartialTransaction (SignedTransaction payload)
        {
             ApiResponse<TransactionAnnounceResponse> localVarResponse = AnnouncePartialTransactionWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates partial transaction Announce a partial transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<TransactionAnnounceResponse> AnnouncePartialTransactionWithHttpInfo (SignedTransaction payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TransactionRoutesApi->AnnouncePartialTransaction");

            var localVarPath = "/transaction/partial";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnouncePartialTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionAnnounceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionAnnounceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionAnnounceResponse)));
        }

        /// <summary>
        /// Creates partial transaction Announce a partial transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<TransactionAnnounceResponse> AnnouncePartialTransactionAsync (SignedTransaction payload)
        {
             ApiResponse<TransactionAnnounceResponse> localVarResponse = await AnnouncePartialTransactionAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates partial transaction Announce a partial transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionAnnounceResponse>> AnnouncePartialTransactionAsyncWithHttpInfo (SignedTransaction payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TransactionRoutesApi->AnnouncePartialTransaction");

            var localVarPath = "/transaction/partial";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnouncePartialTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionAnnounceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionAnnounceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionAnnounceResponse)));
        }

        
        /// <summary>
        /// Creates new transaction Announce a transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Object</returns>
        public object AnnounceTransaction (SignedTransaction payload)
        {
             ApiResponse<object> localVarResponse = AnnounceTransactionWithHttpInfo(payload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new transaction Announce a transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< object > AnnounceTransactionWithHttpInfo (SignedTransaction payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TransactionRoutesApi->AnnounceTransaction");

            var localVarPath = "/transaction";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Creates new transaction Announce a transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<TransactionAnnounceResponse> AnnounceTransactionAsync (SignedTransaction payload)
        {
             ApiResponse<TransactionAnnounceResponse> localVarResponse = await AnnounceTransactionAsyncWithHttpInfo(payload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new transaction Announce a transaction to the network
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="payload">Transaction payload</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionAnnounceResponse>> AnnounceTransactionAsyncWithHttpInfo (SignedTransaction payload)
        {
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling TransactionRoutesApi->AnnounceTransaction");

            var localVarPath = "/transaction";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnnounceTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionAnnounceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionAnnounceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionAnnounceResponse)));
        }

        /// <summary>
        /// Get ransaction information Returns transaction information for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>Object</returns>
        public object GetTransaction (string transactionId)
        {
             ApiResponse<object> localVarResponse = GetTransactionWithHttpInfo(transactionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ransaction information Returns transaction information for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< object > GetTransactionWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetTransaction");

            var localVarPath = "/transaction/{transactionId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get ransaction information Returns transaction information for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Transaction> GetTransactionAsync (string transactionId)
        {
             ApiResponse<Object> localVarResponse = await GetTransactionAsyncWithHttpInfo(transactionId);
            return new TransactionMapping().Apply(localVarResponse.Data.ToString());

        }

        /// <summary>
        /// Get ransaction information Returns transaction information for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction id or hash</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> GetTransactionAsyncWithHttpInfo (string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling TransactionRoutesApi->GetTransaction");

            var localVarPath = "/transaction/{transactionId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionId != null) localVarPathParams.Add("transactionId", Configuration.ApiClient.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get transaction status Returns transaction status for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>TransactionStatusDTO</returns>
        public TransactionStatusDTO GetTransactionStatus (string hash)
        {
             ApiResponse<TransactionStatusDTO> localVarResponse = GetTransactionStatusWithHttpInfo(hash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transaction status Returns transaction status for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>ApiResponse of TransactionStatusDTO</returns>
        public ApiResponse< TransactionStatusDTO > GetTransactionStatusWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling TransactionRoutesApi->GetTransactionStatus");

            var localVarPath = "/transaction/{hash}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarPathParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionStatusDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionStatusDTO)));
        }

        /// <summary>
        /// Get transaction status Returns transaction status for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>Task of TransactionStatusDTO</returns>
        public async System.Threading.Tasks.Task<TransactionStatusDTO> GetTransactionStatusAsync (string hash)
        {
             ApiResponse<TransactionStatusDTO> localVarResponse = await GetTransactionStatusAsyncWithHttpInfo(hash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transaction status Returns transaction status for a given transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">Transaction hash</param>
        /// <returns>Task of ApiResponse (TransactionStatusDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TransactionStatusDTO>> GetTransactionStatusAsyncWithHttpInfo (string hash)
        {
            // verify the required parameter 'hash' is set
            if (hash == null)
                throw new ApiException(400, "Missing required parameter 'hash' when calling TransactionRoutesApi->GetTransactionStatus");

            var localVarPath = "/transaction/{hash}/status";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null) localVarPathParams.Add("hash", Configuration.ApiClient.ParameterToString(hash)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TransactionStatusDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TransactionStatusDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TransactionStatusDTO)));
        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<object> GetTransactions (TransactionIds transactionIds)
        {
             ApiResponse<List<object>> localVarResponse = GetTransactionsWithHttpInfo(transactionIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<object> > GetTransactionsWithHttpInfo (TransactionIds transactionIds)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetTransactions");

            var localVarPath = "/transaction";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> GetTransactionsAsync (TransactionIds transactionIds)
        {
             ApiResponse<List<object>> localVarResponse = await GetTransactionsAsyncWithHttpInfo(transactionIds);
             return localVarResponse.Data.Select(e => new TransactionMapping().Apply(e.ToString())).ToList();

        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionIds">Array of transaction ids or hashes</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetTransactionsAsyncWithHttpInfo (TransactionIds transactionIds)
        {
            // verify the required parameter 'transactionIds' is set
            if (transactionIds == null)
                throw new ApiException(400, "Missing required parameter 'transactionIds' when calling TransactionRoutesApi->GetTransactions");

            var localVarPath = "/transaction";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionIds != null && transactionIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transactionIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>List&lt;TransactionStatusDTO&gt;</returns>
        public List<TransactionStatusDTO> GetTransactionsStatuses (TransactionHashes transactionHashes)
        {
             ApiResponse<List<TransactionStatusDTO>> localVarResponse = GetTransactionsStatusesWithHttpInfo(transactionHashes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>ApiResponse of List&lt;TransactionStatusDTO&gt;</returns>
        public ApiResponse< List<TransactionStatusDTO> > GetTransactionsStatusesWithHttpInfo (TransactionHashes transactionHashes)
        {
            // verify the required parameter 'transactionHashes' is set
            if (transactionHashes == null)
                throw new ApiException(400, "Missing required parameter 'transactionHashes' when calling TransactionRoutesApi->GetTransactionsStatuses");

            var localVarPath = "/transaction/statuses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionHashes != null && transactionHashes.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transactionHashes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionHashes; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionStatusDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TransactionStatusDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionStatusDTO>)));
        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>Task of List&lt;TransactionStatusDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<TransactionStatusDTO>> GetTransactionsStatusesAsync (TransactionHashes transactionHashes)
        {
             ApiResponse<List<TransactionStatusDTO>> localVarResponse = await GetTransactionsStatusesAsyncWithHttpInfo(transactionHashes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get transactions information Returns transaction information for a given set of transaction id or hash
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionHashes">Array of transaction ids or hashes</param>
        /// <returns>Task of ApiResponse (List&lt;TransactionStatusDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TransactionStatusDTO>>> GetTransactionsStatusesAsyncWithHttpInfo (TransactionHashes transactionHashes)
        {
            // verify the required parameter 'transactionHashes' is set
            if (transactionHashes == null)
                throw new ApiException(400, "Missing required parameter 'transactionHashes' when calling TransactionRoutesApi->GetTransactionsStatuses");

            var localVarPath = "/transaction/statuses";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionHashes != null && transactionHashes.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(transactionHashes); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionHashes; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransactionsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionStatusDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TransactionStatusDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionStatusDTO>)));
        }

    }
}
