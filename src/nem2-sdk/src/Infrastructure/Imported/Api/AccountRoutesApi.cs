/* 
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using io.nem2.sdk.Infrastructure.Imported.Api.Client;
using io.nem2.sdk.Infrastructure.Mapping;
using io.nem2.sdk.Model.Transactions;
using Newtonsoft.Json.Linq;
using RestSharp;

namespace io.nem2.sdk.Infrastructure.Imported.Api
{
    internal interface IAccountRoutesApi : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns account information for a given address or publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account address or publicKey</param>
        /// <returns>Task of AccountInfo</returns>
        System.Threading.Tasks.Task<JObject> GetAccountInfoAsync(string accountId);

        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns account information for a given address or publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account address or publicKey</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<JObject>> GetAccountInfoAsyncWithHttpInfo(string accountId);
        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of MultisigAccountInfo</returns>
        System.Threading.Tasks.Task<JObject> GetAccountMultisigAsync(string publicKey);

        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of ApiResponse (MultisigAccountInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<JObject>> GetAccountMultisigAsyncWithHttpInfo(string publicKey);
        /// <summary>
        /// Get multisig graph information
        /// </summary>
        /// <remarks>
        /// Returns information of all accounts publicKey is cosignatory
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of List&lt;MultisigAccountGraphInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<JObject>> GetAccountMultisigGraphAsync(string publicKey);

        /// <summary>
        /// Get multisig graph information
        /// </summary>
        /// <remarks>
        /// Returns information of all accounts publicKey is cosignatory
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of ApiResponse (List&lt;MultisigAccountGraphInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JObject>>> GetAccountMultisigGraphAsyncWithHttpInfo(string publicKey);
        /// <summary>
        /// Get accounts information
        /// </summary>
        /// <remarks>
        /// Returns accounts information for a given set of address and publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Array of publicKeys and address</param>
        /// <returns>Task of List&lt;AccountInfo&gt;</returns>
        System.Threading.Tasks.Task<List<JObject>> GetAccountsInfoAsync(JObject accountIds);

        /// <summary>
        /// Get accounts information
        /// </summary>
        /// <remarks>
        /// Returns accounts information for a given set of address and publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Array of publicKeys and address</param>
        /// <returns>Task of ApiResponse (List&lt;AccountInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<JObject>>> GetAccountsInfoAsyncWithHttpInfo(JObject accountIds);
        /// <summary>
        /// Get incoming transactions information
        /// </summary>
        /// <remarks>
        /// Returns incoming transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> IncomingTransactionsAsync(string publicKey, int? pageSize = null, string id = null);

        /// <summary>
        /// Get incoming transactions information
        /// </summary>
        /// <remarks>
        /// Returns incoming transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> IncomingTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null);
        /// <summary>
        /// Get outgoing transactions information
        /// </summary>
        /// <remarks>
        /// Returns outgoing transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> OutgoingTransactionsAsync(string publicKey, int? pageSize = null, string id = null);

        /// <summary>
        /// Get outgoing transactions information
        /// </summary>
        /// <remarks>
        /// Returns outgoing transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> OutgoingTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null);
        /// <summary>
        /// Get partial transactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<AggregateTransaction>> PartialTransactionsAsync(string publicKey, int? pageSize = null, string id = null);

        /// <summary>
        /// Get partial transactions information
        /// </summary>
        /// <remarks>
        /// Returns partial transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PartialTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null);
        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsAsync(string publicKey, int? pageSize = null, string id = null);

        /// <summary>
        /// Get transactions information
        /// </summary>
        /// <remarks>
        /// Returns transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null);
        /// <summary>
        /// Get unconfirmed transactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> UnconfirmedTransactionsAsync(string publicKey, int? pageSize = null, string id = null);

        /// <summary>
        /// Get unconfirmed transactions information
        /// </summary>
        /// <remarks>
        /// Returns unconfirmed transactions information for a given publicKey
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> UnconfirmedTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class AccountRoutesApi : IAccountRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal AccountRoutesApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="url">The url</param>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        internal AccountRoutesApi(string url, Configuration configuration = null)
        {
            
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            if (url == null) throw new NullReferenceException("Url cannot be null");
                Configuration.ApiClient = new ApiClient(url);

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        internal Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get account information Returns account information for a given address or publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account address or publicKey</param>
        /// <returns>Task of AccountInfo</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountInfoAsync(string accountId)
        {
            ApiResponse<JObject> localVarResponse = await GetAccountInfoAsyncWithHttpInfo(accountId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get account information Returns account information for a given address or publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account address or publicKey</param>
        /// <returns>Task of ApiResponse (AccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JObject>> GetAccountInfoAsyncWithHttpInfo(string accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountRoutesApi->GetAccountInfo");

            var localVarPath = "/account/{accountId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<JObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JObject)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JObject)));
        }

        /// <summary>
        /// Get account information Returns information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">The multisig account id key for which information should be retreived.</param>
        /// <returns>Task of MultisigAccountInfo</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountMultisigAsync(string accountId)
        {
            ApiResponse<JObject> localVarResponse = await GetAccountMultisigAsyncWithHttpInfo(accountId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get account information Returns information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of ApiResponse (MultisigAccountInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JObject>> GetAccountMultisigAsyncWithHttpInfo(string accountId)
        {
            // verify the required parameter 'publicKey' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling AccountRoutesApi->GetAccountMultisig");

            var localVarPath = "/account/{accountId}/multisig";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", Configuration.ApiClient.ParameterToString(accountId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisig", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JObject)Configuration.ApiClient.Deserialize(localVarResponse, typeof(JObject)));
        }

        /// <summary>
        /// Get multisig graph information Returns information of all accounts publicKey is cosignatory
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of List&lt;MultisigAccountGraphInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<JObject>> GetAccountMultisigGraphAsync(string publicKey)
        {
            ApiResponse<List<JObject>> localVarResponse = await GetAccountMultisigGraphAsyncWithHttpInfo(publicKey);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get multisig graph information Returns information of all accounts publicKey is cosignatory
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The multisig account public key for which information should be retreived.</param>
        /// <returns>Task of ApiResponse (List&lt;MultisigAccountGraphInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JObject>>> GetAccountMultisigGraphAsyncWithHttpInfo(string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->GetAccountMultisigGraph");

            var localVarPath = "/account/{publicKey}/multisig/graph";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountMultisigGraph", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JObject>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JObject>)));
        }
     
        /// <summary>
        /// Get accounts information Returns accounts information for a given set of address and publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Array of publicKeys and address</param>
        /// <returns>Task of List&lt;AccountInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<JObject>> GetAccountsInfoAsync(JObject accountIds)
        {
            ApiResponse<List<JObject>> localVarResponse = await GetAccountsInfoAsyncWithHttpInfo(accountIds);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Get accounts information Returns accounts information for a given set of address and publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountIds">Array of publicKeys and address</param>
        /// <returns>Task of ApiResponse (List&lt;AccountInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<JObject>>> GetAccountsInfoAsyncWithHttpInfo(JObject accountIds)
        {
            // verify the required parameter 'accountIds' is set
            if (accountIds == null)
                throw new ApiException(400, "Missing required parameter 'accountIds' when calling AccountRoutesApi->GetAccountsInfo");

            var localVarPath = "/account";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountIds != null && accountIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(accountIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = accountIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountsInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<JObject>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<JObject>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<JObject>)));
        }

        /// <summary>
        /// Get incoming transactions information Returns incoming transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> IncomingTransactionsAsync(string publicKey, int? pageSize = null, string id = null)
        {
            ApiResponse<List<Object>> localVarResponse = await IncomingTransactionsAsyncWithHttpInfo(publicKey, pageSize, id);
            return localVarResponse.Data.Select(i => new TransactionMapping().Apply(i.ToString())).ToList();

        }

        /// <summary>
        /// Get incoming transactions information Returns incoming transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> IncomingTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->IncomingTransactions");

            var localVarPath = "/account/{publicKey}/transactions/incoming";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get outgoing transactions information Returns outgoing transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> OutgoingTransactionsAsync(string publicKey, int? pageSize = null, string id = null)
        {
            ApiResponse<List<Object>> localVarResponse = await OutgoingTransactionsAsyncWithHttpInfo(publicKey, pageSize, id);
            return localVarResponse.Data.Select(i => new TransactionMapping().Apply(i.ToString())).ToList(); ;

        }

        /// <summary>
        /// Get outgoing transactions information Returns outgoing transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> OutgoingTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->OutgoingTransactions");

            var localVarPath = "/account/{publicKey}/transactions/outgoing";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutgoingTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }



        /// <summary>
        /// Get partial transactions information Returns partial transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<AggregateTransaction>> PartialTransactionsAsync(string publicKey, int? pageSize = null, string id = null)
        {
            ApiResponse<string> localVarResponse = await PartialTransactionsAsyncWithHttpInfo(publicKey, pageSize, id);
            return localVarResponse.Data.Select(i => (AggregateTransaction) new TransactionMapping().Apply(i.ToString())).ToList();

        }

        /// <summary>
        /// Get partial transactions information Returns partial transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PartialTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->PartialTransactions");

            var localVarPath = "/account/{publicKey}/transactions/partial";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PartialTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string)Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }
        
        /// <summary>
        /// Get transactions information Returns transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsAsync(string publicKey, int? pageSize = null, string id = null)
        {
            ApiResponse<List<object>> localVarResponse = await TransactionsAsyncWithHttpInfo(publicKey, pageSize, id);
            return localVarResponse.Data.Select(i => new TransactionMapping().Apply(i.ToString())).ToList();

        }

        /// <summary>
        /// Get transactions information Returns transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->Transactions");

            var localVarPath = "/account/{publicKey}/transactions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return  new ApiResponse<List<object>>(localVarStatusCode,
            localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
            (List<object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));

            
        }

        /// <summary>
        /// Get unconfirmed transactions information Returns unconfirmed transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> UnconfirmedTransactionsAsync(string publicKey, int? pageSize = null, string id = null)
        {
            ApiResponse<List<Object>> localVarResponse = await UnconfirmedTransactionsAsyncWithHttpInfo(publicKey, pageSize, id);
            return localVarResponse.Data.Select(i => new TransactionMapping().Apply(i.ToString())).ToList(); ;

        }

        /// <summary>
        /// Get unconfirmed transactions information Returns unconfirmed transactions information for a given publicKey
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account publicKey</param>
        /// <param name="pageSize">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> UnconfirmedTransactionsAsyncWithHttpInfo(string publicKey, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->UnconfirmedTransactions");

            var localVarPath = "/account/{publicKey}/transactions/unconfirmed";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnconfirmedTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

    }
}
