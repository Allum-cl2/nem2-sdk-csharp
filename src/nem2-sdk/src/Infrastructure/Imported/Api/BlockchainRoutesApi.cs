/* 
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using io.nem2.sdk.Infrastructure.Buffers.Model;
using io.nem2.sdk.Infrastructure.Imported.Api.Client;
using io.nem2.sdk.Infrastructure.Mapping;
using io.nem2.sdk.Model.Accounts;
using io.nem2.sdk.Model.Blockchain;
using io.nem2.sdk.Model.Transactions;
using RestSharp;

namespace io.nem2.sdk.Infrastructure.Imported.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IBlockchainRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get block information
        /// </summary>
        /// <remarks>
        /// Returns block information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>BlockInfoDTO</returns>
        BlockInfoDTO GetBlockByHeight (ulong? height, int? pageSize = null, string id = null);

        /// <summary>
        /// Get block information
        /// </summary>
        /// <remarks>
        /// Returns block information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>ApiResponse of BlockInfoDTO</returns>
        ApiResponse<BlockInfoDTO> GetBlockByHeightWithHttpInfo (ulong? height, int? pageSize = null, string id = null);
        /// <summary>
        /// Get transactions from a block information
        /// </summary>
        /// <remarks>
        /// Returns all transactions information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<TransactionInfoDTO> GetBlockTransactions (ulong? height);

        /// <summary>
        /// Get transactions from a block information
        /// </summary>
        /// <remarks>
        /// Returns all transactions information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<TransactionInfoDTO>> GetBlockTransactionsWithHttpInfo (ulong? height);
        /// <summary>
        /// Get the current height of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current height of the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>HeightDTO</returns>
        ChainHeightDTO GetBlockchainHeight ();

        /// <summary>
        /// Get the current height of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current height of the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HeightDTO</returns>
        ApiResponse<ChainHeightDTO> GetBlockchainHeightWithHttpInfo ();
        /// <summary>
        /// Get the current score of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current chain score
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainScoreDTO</returns>
        BlockchainScore GetBlockchainScore ();

        /// <summary>
        /// Get the current score of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current chain score
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainScoreDTO</returns>
        ApiResponse<BlockchainScore> GetBlockchainScoreWithHttpInfo ();
        /// <summary>
        /// Get blocks information
        /// </summary>
        /// <remarks>
        /// Returns blocks information for a given block height and limit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>List&lt;BlockInfoDTO&gt;</returns>
        List<BlockInfoDTO> GetBlocksByHeightWithLimit (ulong? height, int? limit);

        /// <summary>
        /// Get blocks information
        /// </summary>
        /// <remarks>
        /// Returns blocks information for a given block height and limit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>ApiResponse of List&lt;BlockInfoDTO&gt;</returns>
        ApiResponse<List<BlockInfoDTO>> GetBlocksByHeightWithLimitWithHttpInfo (ulong? height, int? limit);
        /// <summary>
        /// Get partial statistical information
        /// </summary>
        /// <remarks>
        /// Returns statistical information for the blockchain for a set of blocks after a given height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>List&lt;BlockDTO&gt;</returns>
        List<BlockInfo> GetDiagnosticBlocksWithLimit (ulong? height, int? limit);

        /// <summary>
        /// Get partial statistical information
        /// </summary>
        /// <remarks>
        /// Returns statistical information for the blockchain for a set of blocks after a given height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>ApiResponse of List&lt;BlockDTO&gt;</returns>
        ApiResponse<List<BlockInfoDTO>> GetDiagnosticBlocksWithLimitWithHttpInfo (ulong? height, int? limit);
        /// <summary>
        /// Get the storage information
        /// </summary>
        /// <remarks>
        /// Returns statistical information about the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainStorageInfoDTO</returns>
        BlockchainStorageInfo GetDiagnosticStorage ();

        /// <summary>
        /// Get the storage information
        /// </summary>
        /// <remarks>
        /// Returns statistical information about the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainStorageInfoDTO</returns>
        ApiResponse<BlockchainStorageInfo> GetDiagnosticStorageWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get block information
        /// </summary>
        /// <remarks>
        /// Returns block information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of BlockInfoDTO</returns>
        System.Threading.Tasks.Task<BlockInfo> GetBlockByHeightAsync (ulong? height, int? pageSize = null, string id = null);

        /// <summary>
        /// Get block information
        /// </summary>
        /// <remarks>
        /// Returns block information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of ApiResponse (BlockInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockInfoDTO>> GetBlockByHeightAsyncWithHttpInfo (ulong? height, int? pageSize = null, string id = null);
        /// <summary>
        /// Get transactions from a block information
        /// </summary>
        /// <remarks>
        /// Returns all transactions information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Transaction>> GetBlockTransactionsAsync (ulong? height, int? pageSize = null, string id = null);

        /// <summary>
        /// Get transactions from a block information
        /// </summary>
        /// <remarks>
        /// Returns all transactions information for a given block height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> GetBlockTransactionsAsyncWithHttpInfo (ulong? height, int? pageSize = null, string id = null);
        /// <summary>
        /// Get the current height of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current height of the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HeightDTO</returns>
        System.Threading.Tasks.Task<ulong> GetBlockchainHeightAsync ();

        /// <summary>
        /// Get the current height of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current height of the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HeightDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChainHeightDTO>> GetBlockchainHeightAsyncWithHttpInfo ();
        /// <summary>
        /// Get the current score of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current chain score
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockchainScoreDTO</returns>
        System.Threading.Tasks.Task<ulong> GetBlockchainScoreAsync ();

        /// <summary>
        /// Get the current score of the chain
        /// </summary>
        /// <remarks>
        /// Returns the current chain score
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockchainScoreDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockchainScore>> GetBlockchainScoreAsyncWithHttpInfo ();
        /// <summary>
        /// Get blocks information
        /// </summary>
        /// <remarks>
        /// Returns blocks information for a given block height and limit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of List&lt;BlockInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BlockInfo>> GetBlocksByHeightWithLimitAsync (ulong? height, int? limit);

        /// <summary>
        /// Get blocks information
        /// </summary>
        /// <remarks>
        /// Returns blocks information for a given block height and limit
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of ApiResponse (List&lt;BlockInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockInfoDTO>>> GetBlocksByHeightWithLimitAsyncWithHttpInfo (ulong? height, int? limit);
        /// <summary>
        /// Get partial statistical information
        /// </summary>
        /// <remarks>
        /// Returns statistical information for the blockchain for a set of blocks after a given height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of List&lt;BlockDTO&gt;</returns>
        System.Threading.Tasks.Task<List<BlockInfo>> GetDiagnosticBlocksWithLimitAsync (ulong? height, int? limit);

        /// <summary>
        /// Get partial statistical information
        /// </summary>
        /// <remarks>
        /// Returns statistical information for the blockchain for a set of blocks after a given height
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of ApiResponse (List&lt;BlockDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<BlockInfoDTO>>> GetDiagnosticBlocksWithLimitAsyncWithHttpInfo (ulong? height, int? limit);
        /// <summary>
        /// Get the storage information
        /// </summary>
        /// <remarks>
        /// Returns statistical information about the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockchainStorageInfoDTO</returns>
        System.Threading.Tasks.Task<BlockchainStorageInfo> GetDiagnosticStorageAsync ();

        /// <summary>
        /// Get the storage information
        /// </summary>
        /// <remarks>
        /// Returns statistical information about the blockchain
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockchainStorageInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockchainStorageInfoDTO>> GetDiagnosticStorageAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class BlockchainRoutesApi : IBlockchainRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal BlockchainRoutesApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlockchainRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        internal BlockchainRoutesApi(string url, Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            if (url == null) throw new NullReferenceException("Url cannot be null");
                 Configuration.ApiClient = new ApiClient(url);

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get block information Returns block information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>BlockInfoDTO</returns>
        public BlockInfoDTO GetBlockByHeight (ulong? height, int? pageSize = null, string id = null)
        {
             ApiResponse<BlockInfoDTO> localVarResponse = GetBlockByHeightWithHttpInfo(height, pageSize, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get block information Returns block information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>ApiResponse of BlockInfoDTO</returns>
        public ApiResponse< BlockInfoDTO > GetBlockByHeightWithHttpInfo (ulong? height, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetBlockByHeight");

            var localVarPath = "/block/{height}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockByHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockInfoDTO)));
        }

        /// <summary>
        /// Get block information Returns block information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of BlockInfoDTO</returns>
        public async System.Threading.Tasks.Task<BlockInfo> GetBlockByHeightAsync (ulong? height, int? pageSize = null, string id = null)
        {
            
             ApiResponse<BlockInfoDTO> localVarResponse = await GetBlockByHeightAsyncWithHttpInfo(height, pageSize, id);
             var network = (int)Convert.ToInt64(localVarResponse.Data.Block.Version.ToString("X").Substring(0, 2), 16);
             return new BlockInfo(
                 localVarResponse.Data.Meta.Hash,
                 localVarResponse.Data.Meta.GenerationHash,
                 localVarResponse.Data.Meta.TotalFee,
                 localVarResponse.Data.Meta.NumTransactions,
                 localVarResponse.Data.Block.Signature,
                 new PublicAccount(localVarResponse.Data.Block.Signer, NetworkType.GetRawValue(network)),
                 NetworkType.GetRawValue(network),
                 localVarResponse.Data.Block.Version,
                 localVarResponse.Data.Block.Type,
                 localVarResponse.Data.Block.Height,
                 localVarResponse.Data.Block.Timestamp,
                 localVarResponse.Data.Block.Difficulty,
                 localVarResponse.Data.Block.PreviousBlockHash,
                 localVarResponse.Data.Block.BlockTransactionsHash);

        }

        /// <summary>
        /// Get block information Returns block information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of ApiResponse (BlockInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockInfoDTO>> GetBlockByHeightAsyncWithHttpInfo (ulong? height, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetBlockByHeight");

            var localVarPath = "/block/{height}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockByHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockInfoDTO)));
        }

        /// <summary>
        /// Get transactions from a block information Returns all transactions information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<TransactionInfoDTO> GetBlockTransactions (ulong? height)
        {
             ApiResponse<List<TransactionInfoDTO>> localVarResponse = GetBlockTransactionsWithHttpInfo(height);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get transactions from a block information Returns all transactions information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<TransactionInfoDTO>> GetBlockTransactionsWithHttpInfo (ulong? height)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetBlockTransactions");

            var localVarPath = "/block/{height}/transactions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TransactionInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TransactionInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TransactionInfoDTO>)));
        }

        /// <summary>
        /// Get transactions from a block information Returns all transactions information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> GetBlockTransactionsAsync (ulong? height, int? pageSize = null, string id = null)
        {
             ApiResponse<List<object>> localVarResponse = await GetBlockTransactionsAsyncWithHttpInfo(height, pageSize, id);
             return localVarResponse.Data.Select(i => new TransactionMapping().Apply(i.ToString())).ToList(); ;

        }

        /// <summary>
        /// Get transactions from a block information Returns all transactions information for a given block height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">Block height</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetBlockTransactionsAsyncWithHttpInfo (ulong? height, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetBlockTransactions");

            var localVarPath = "/block/{height}/transactions";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        /// <summary>
        /// Get the current height of the chain Returns the current height of the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>HeightDTO</returns>
        public ChainHeightDTO GetBlockchainHeight ()
        {
             ApiResponse<ChainHeightDTO> localVarResponse = GetBlockchainHeightWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current height of the chain Returns the current height of the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of HeightDTO</returns>
        public ApiResponse< ChainHeightDTO > GetBlockchainHeightWithHttpInfo ()
        {

            var localVarPath = "/chain/height";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockchainHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainHeightDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainHeightDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainHeightDTO)));
        }

        /// <summary>
        /// Get the current height of the chain Returns the current height of the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of HeightDTO</returns>
        public async System.Threading.Tasks.Task<ulong> GetBlockchainHeightAsync ()
        {
             ApiResponse<ChainHeightDTO> localVarResponse = await GetBlockchainHeightAsyncWithHttpInfo();
             return localVarResponse.Data.Height;

        }

        /// <summary>
        /// Get the current height of the chain Returns the current height of the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (HeightDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChainHeightDTO>> GetBlockchainHeightAsyncWithHttpInfo ()
        {

            var localVarPath = "/chain/height";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockchainHeight", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainHeightDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainHeightDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainHeightDTO)));
        }

        /// <summary>
        /// Get the current score of the chain Returns the current chain score
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainScoreDTO</returns>
        public BlockchainScore GetBlockchainScore ()
        {
             ApiResponse<BlockchainScore> localVarResponse = GetBlockchainScoreWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current score of the chain Returns the current chain score
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainScoreDTO</returns>
        public ApiResponse< BlockchainScore > GetBlockchainScoreWithHttpInfo ()
        {

            var localVarPath = "/chain/score";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockchainScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockchainScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockchainScore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockchainScore)));
        }

        /// <summary>
        /// Get the current score of the chain Returns the current chain score
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockchainScoreDTO</returns>
        public async System.Threading.Tasks.Task<ulong> GetBlockchainScoreAsync ()
        {
             ApiResponse<BlockchainScore> localVarResponse = await GetBlockchainScoreAsyncWithHttpInfo();
             return localVarResponse.Data.Extract();

        }

        /// <summary>
        /// Get the current score of the chain Returns the current chain score
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockchainScoreDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockchainScore>> GetBlockchainScoreAsyncWithHttpInfo ()
        {

            var localVarPath = "/chain/score";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlockchainScore", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockchainScore>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockchainScore) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockchainScore)));
        }

        /// <summary>
        /// Get blocks information Returns blocks information for a given block height and limit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>List&lt;BlockInfoDTO&gt;</returns>
        public List<BlockInfoDTO> GetBlocksByHeightWithLimit (ulong? height, int? limit)
        {
             ApiResponse<List<BlockInfoDTO>> localVarResponse = GetBlocksByHeightWithLimitWithHttpInfo(height, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get blocks information Returns blocks information for a given block height and limit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>ApiResponse of List&lt;BlockInfoDTO&gt;</returns>
        public ApiResponse< List<BlockInfoDTO> > GetBlocksByHeightWithLimitWithHttpInfo (ulong? height, int? limit)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetBlocksByHeightWithLimit");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling BlockchainRoutesApi->GetBlocksByHeightWithLimit");

            var localVarPath = "/blocks/{height}/limit/{limit}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (limit != null) localVarPathParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlocksByHeightWithLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlockInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BlockInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlockInfoDTO>)));
        }

        /// <summary>
        /// Get blocks information Returns blocks information for a given block height and limit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of List&lt;BlockInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockInfo>> GetBlocksByHeightWithLimitAsync (ulong? height, int? limit)
        {
             ApiResponse<List<BlockInfoDTO>> localVarResponse = await GetBlocksByHeightWithLimitAsyncWithHttpInfo(height, limit);

            return localVarResponse.Data.Select(e => new BlockInfo(
                 e.Meta.Hash,
                 e.Meta.GenerationHash,
                 e.Meta.TotalFee,
                 e.Meta.NumTransactions,
                 e.Block.Signature,
                 new PublicAccount(e.Block.Signer, NetworkType.GetRawValue((int)Convert.ToInt64(e.Block.Version.ToString("X").Substring(0, 2), 16))),
                 NetworkType.GetRawValue((int)Convert.ToInt64(e.Block.Version.ToString("X").Substring(0, 2), 16)),
                 e.Block.Version,
                 e.Block.Type,
                 e.Block.Height,
                 e.Block.Timestamp,
                 e.Block.Difficulty,
                 e.Block.PreviousBlockHash,
                 e.Block.BlockTransactionsHash)).ToList();

        }

        /// <summary>
        /// Get blocks information Returns blocks information for a given block height and limit
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of ApiResponse (List&lt;BlockInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BlockInfoDTO>>> GetBlocksByHeightWithLimitAsyncWithHttpInfo (ulong? height, int? limit)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetBlocksByHeightWithLimit");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling BlockchainRoutesApi->GetBlocksByHeightWithLimit");

            var localVarPath = "/blocks/{height}/limit/{limit}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (limit != null) localVarPathParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBlocksByHeightWithLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlockInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BlockInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlockInfoDTO>)));
        }

        /// <summary>
        /// Get partial statistical information Returns statistical information for the blockchain for a set of blocks after a given height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>List&lt;BlockDTO&gt;</returns>
        public List<BlockInfo> GetDiagnosticBlocksWithLimit (ulong? height, int? limit)
        {
             ApiResponse<List<BlockInfoDTO>> localVarResponse = GetDiagnosticBlocksWithLimitWithHttpInfo(height, limit);
             return localVarResponse.Data.Select(e => new BlockInfo(e.Meta.Hash, e.Meta.GenerationHash, e.Meta.TotalFee, e.Meta.NumTransactions, e.Block.Signature, new PublicAccount(e.Block.Signer, NetworkType.GetRawValue(e.Block.Type)), NetworkType.GetRawValue(e.Block.Type), e.Block.Version, e.Block.Type, e.Block.Height, e.Block.Timestamp, e.Block.Difficulty, e.Block.PreviousBlockHash, e.Block.BlockTransactionsHash)).ToList();
        }

        /// <summary>
        /// Get partial statistical information Returns statistical information for the blockchain for a set of blocks after a given height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>ApiResponse of List&lt;BlockDTO&gt;</returns>
        public ApiResponse<List<BlockInfoDTO>> GetDiagnosticBlocksWithLimitWithHttpInfo (ulong? height, int? limit)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetDiagnosticBlocksWithLimit");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling BlockchainRoutesApi->GetDiagnosticBlocksWithLimit");

            var localVarPath = "/diagnostic/blocks/{height}/limit/{limit}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (limit != null) localVarPathParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiagnosticBlocksWithLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlockInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BlockInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlockInfoDTO>)));
        }

        /// <summary>
        /// Get partial statistical information Returns statistical information for the blockchain for a set of blocks after a given height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of List&lt;BlockDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<BlockInfo>> GetDiagnosticBlocksWithLimitAsync (ulong? height, int? limit)
        {
             ApiResponse<List<BlockInfoDTO>> localVarResponse = await GetDiagnosticBlocksWithLimitAsyncWithHttpInfo(height, limit);
             return localVarResponse.Data.Select(e => new BlockInfo(
                 e.Meta.Hash,
                 e.Meta.GenerationHash,
                 e.Meta.TotalFee,
                 e.Meta.NumTransactions,
                 e.Block.Signature,
                 new PublicAccount(e.Block.Signer, NetworkType.GetRawValue((int)Convert.ToInt64(e.Block.Version.ToString("X").Substring(0, 2), 16))),
                 NetworkType.GetRawValue((int)Convert.ToInt64(e.Block.Version.ToString("X").Substring(0, 2), 16)),
                 e.Block.Version,
                 e.Block.Type,
                 e.Block.Height,
                 e.Block.Timestamp,
                 e.Block.Difficulty,
                 e.Block.PreviousBlockHash,
                 e.Block.BlockTransactionsHash)).ToList();
        }

        /// <summary>
        /// Get partial statistical information Returns statistical information for the blockchain for a set of blocks after a given height
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="height">The block height at which information should be returned</param>
        /// <param name="limit">Block limit</param>
        /// <returns>Task of ApiResponse (List&lt;BlockDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<BlockInfoDTO>>> GetDiagnosticBlocksWithLimitAsyncWithHttpInfo (ulong? height, int? limit)
        {
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling BlockchainRoutesApi->GetDiagnosticBlocksWithLimit");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling BlockchainRoutesApi->GetDiagnosticBlocksWithLimit");

            var localVarPath = "/diagnostic/blocks/{height}/limit/{limit}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (height != null) localVarPathParams.Add("height", Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (limit != null) localVarPathParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiagnosticBlocksWithLimit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<BlockInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<BlockInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<BlockInfoDTO>)));
        }

        /// <summary>
        /// Get the storage information Returns statistical information about the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainStorageInfoDTO</returns>
        public BlockchainStorageInfo GetDiagnosticStorage ()
        {
             ApiResponse<BlockchainStorageInfo> localVarResponse = GetDiagnosticStorageWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the storage information Returns statistical information about the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainStorageInfoDTO</returns>
        public ApiResponse< BlockchainStorageInfo > GetDiagnosticStorageWithHttpInfo ()
        {

            var localVarPath = "/diagnostic/storage";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiagnosticStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockchainStorageInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockchainStorageInfo) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockchainStorageInfo)));
        }

        /// <summary>
        /// Get the storage information Returns statistical information about the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockchainStorageInfoDTO</returns>
        public async System.Threading.Tasks.Task<BlockchainStorageInfo> GetDiagnosticStorageAsync ()
        {
             ApiResponse<BlockchainStorageInfoDTO> localVarResponse = await GetDiagnosticStorageAsyncWithHttpInfo();
             return new BlockchainStorageInfo(localVarResponse.Data.NumAccounts, localVarResponse.Data.NumBlocks, localVarResponse.Data.NumTransactions);

        }

        /// <summary>
        /// Get the storage information Returns statistical information about the blockchain
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockchainStorageInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockchainStorageInfoDTO>> GetDiagnosticStorageAsyncWithHttpInfo ()
        {

            var localVarPath = "/diagnostic/storage";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDiagnosticStorage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockchainStorageInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlockchainStorageInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockchainStorageInfoDTO)));
        }

    }
}
