/* 
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using io.nem2.sdk.Infrastructure.Buffers.Model;
using io.nem2.sdk.Infrastructure.HttpRepositories;
using io.nem2.sdk.Infrastructure.Imported.Api.Client;
using RestSharp;

namespace io.nem2.sdk.Infrastructure.Imported.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface IMosaicRoutesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Returns information for a given mosaicId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>MosaicInfoDTO</returns>
        MosaicInfoDTO GetMosaic (string mosaicId);

        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Returns information for a given mosaicId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>ApiResponse of MosaicInfoDTO</returns>
        ApiResponse<MosaicInfoDTO> GetMosaicWithHttpInfo (string mosaicId);
        /// <summary>
        /// Get information for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns information for a given set of mosaicIds
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>List&lt;MosaicInfoDTO&gt;</returns>
        List<MosaicInfoDTO> GetMosaics (MosaicIds mosaicIds);

        /// <summary>
        /// Get information for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns information for a given set of mosaicIds
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>ApiResponse of List&lt;MosaicInfoDTO&gt;</returns>
        ApiResponse<List<MosaicInfoDTO>> GetMosaicsWithHttpInfo (MosaicIds mosaicIds);
        /// <summary>
        /// Get mosaics information
        /// </summary>
        /// <remarks>
        /// Returns information for a given namespaceId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>List&lt;MosaicInfoDTO&gt;</returns>
        List<MosaicInfoDTO> GetMosaicsFromNamespace (string namespaceId);

        /// <summary>
        /// Get mosaics information
        /// </summary>
        /// <remarks>
        /// Returns information for a given namespaceId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>ApiResponse of List&lt;MosaicInfoDTO&gt;</returns>
        ApiResponse<List<MosaicInfoDTO>> GetMosaicsFromNamespaceWithHttpInfo (string namespaceId);
        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns names for mosaics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>List&lt;MosaicNameDTO&gt;</returns>
        MosaicNameDTO[] GetMosaicsName (MosaicIds mosaicIds);

        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns names for mosaics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>ApiResponse of List&lt;MosaicNameDTO&gt;</returns>
        ApiResponse<MosaicNameDTO[]> GetMosaicsNameWithHttpInfo (MosaicIds mosaicIds);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Returns information for a given mosaicId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>Task of MosaicInfoDTO</returns>
        System.Threading.Tasks.Task<MosaicInfoDTO> GetMosaicAsync (string mosaicId);

        /// <summary>
        /// Get mosaic information
        /// </summary>
        /// <remarks>
        /// Returns information for a given mosaicId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>Task of ApiResponse (MosaicInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicInfoDTO>> GetMosaicAsyncWithHttpInfo (string mosaicId);
        /// <summary>
        /// Get information for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns information for a given set of mosaicIds
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of List&lt;MosaicInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MosaicInfoDTO>> GetMosaicsAsync (MosaicIds mosaicIds);

        /// <summary>
        /// Get information for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns information for a given set of mosaicIds
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of ApiResponse (List&lt;MosaicInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MosaicInfoDTO>>> GetMosaicsAsyncWithHttpInfo (MosaicIds mosaicIds);
        /// <summary>
        /// Get mosaics information
        /// </summary>
        /// <remarks>
        /// Returns information for a given namespaceId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>Task of List&lt;MosaicInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<MosaicInfoDTO>> GetMosaicsFromNamespaceAsync (string namespaceId);

        /// <summary>
        /// Get mosaics information
        /// </summary>
        /// <remarks>
        /// Returns information for a given namespaceId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>Task of ApiResponse (List&lt;MosaicInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MosaicInfoDTO>>> GetMosaicsFromNamespaceAsyncWithHttpInfo (string namespaceId);
        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns names for mosaics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of List&lt;MosaicNameDTO&gt;</returns>
        System.Threading.Tasks.Task<MosaicNameDTO[]> GetMosaicsNameAsync (MosaicIds mosaicIds);

        /// <summary>
        /// Get readable names for a set of mosaics
        /// </summary>
        /// <remarks>
        /// Returns names for mosaics
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of ApiResponse (List&lt;MosaicNameDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<MosaicNameDTO[]>> GetMosaicsNameAsyncWithHttpInfo (MosaicIds mosaicIds);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class MosaicRoutesApi : IMosaicRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal MosaicRoutesApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MosaicRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        internal MosaicRoutesApi(HttpRouter http, Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            if (http.Url == null) throw new NullReferenceException("Url cannot be null");
                 Configuration.ApiClient = new ApiClient(http.Url);

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get mosaic information Returns information for a given mosaicId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>MosaicInfoDTO</returns>
        public MosaicInfoDTO GetMosaic (string mosaicId)
        {
             ApiResponse<MosaicInfoDTO> localVarResponse = GetMosaicWithHttpInfo(mosaicId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mosaic information Returns information for a given mosaicId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>ApiResponse of MosaicInfoDTO</returns>
        public ApiResponse< MosaicInfoDTO > GetMosaicWithHttpInfo (string mosaicId)
        {
            // verify the required parameter 'mosaicId' is set
            if (mosaicId == null)
                throw new ApiException(400, "Missing required parameter 'mosaicId' when calling MosaicRoutesApi->GetMosaic");

            var localVarPath = "/mosaic/{mosaicId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarPathParams.Add("mosaicId", Configuration.ApiClient.ParameterToString(mosaicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MosaicInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicInfoDTO)));
        }

        /// <summary>
        /// Get mosaic information Returns information for a given mosaicId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>Task of MosaicInfoDTO</returns>
        public async System.Threading.Tasks.Task<MosaicInfoDTO> GetMosaicAsync (string mosaicId)
        {
             ApiResponse<MosaicInfoDTO> localVarResponse = await GetMosaicAsyncWithHttpInfo(mosaicId);

             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mosaic information Returns information for a given mosaicId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicId">The mosaic id for which information should be retreived</param>
        /// <returns>Task of ApiResponse (MosaicInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicInfoDTO>> GetMosaicAsyncWithHttpInfo (string mosaicId)
        {
            // verify the required parameter 'mosaicId' is set
            if (mosaicId == null)
                throw new ApiException(400, "Missing required parameter 'mosaicId' when calling MosaicRoutesApi->GetMosaic");

            var localVarPath = "/mosaic/{mosaicId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicId != null) localVarPathParams.Add("mosaicId", Configuration.ApiClient.ParameterToString(mosaicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicInfoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MosaicInfoDTO) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicInfoDTO)));
        }

        /// <summary>
        /// Get information for a set of mosaics Returns information for a given set of mosaicIds
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>List&lt;MosaicInfoDTO&gt;</returns>
        public List<MosaicInfoDTO> GetMosaics (MosaicIds mosaicIds)
        {
             ApiResponse<List<MosaicInfoDTO>> localVarResponse = GetMosaicsWithHttpInfo(mosaicIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information for a set of mosaics Returns information for a given set of mosaicIds
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>ApiResponse of List&lt;MosaicInfoDTO&gt;</returns>
        public ApiResponse< List<MosaicInfoDTO> > GetMosaicsWithHttpInfo (MosaicIds mosaicIds)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling MosaicRoutesApi->GetMosaics");

            var localVarPath = "/mosaic";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MosaicInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MosaicInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MosaicInfoDTO>)));
        }

        /// <summary>
        /// Get information for a set of mosaics Returns information for a given set of mosaicIds
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of List&lt;MosaicInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MosaicInfoDTO>> GetMosaicsAsync (MosaicIds mosaicIds)
        {
             ApiResponse<List<MosaicInfoDTO>> localVarResponse = await GetMosaicsAsyncWithHttpInfo(mosaicIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information for a set of mosaics Returns information for a given set of mosaicIds
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of ApiResponse (List&lt;MosaicInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MosaicInfoDTO>>> GetMosaicsAsyncWithHttpInfo (MosaicIds mosaicIds)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling MosaicRoutesApi->GetMosaics");

            var localVarPath = "/mosaic";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MosaicInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MosaicInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MosaicInfoDTO>)));
        }

        /// <summary>
        /// Get mosaics information Returns information for a given namespaceId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>List&lt;MosaicInfoDTO&gt;</returns>
        public List<MosaicInfoDTO> GetMosaicsFromNamespace (string namespaceId)
        {
             ApiResponse<List<MosaicInfoDTO>> localVarResponse = GetMosaicsFromNamespaceWithHttpInfo(namespaceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get mosaics information Returns information for a given namespaceId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>ApiResponse of List&lt;MosaicInfoDTO&gt;</returns>
        public ApiResponse< List<MosaicInfoDTO> > GetMosaicsFromNamespaceWithHttpInfo (string namespaceId)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling MosaicRoutesApi->GetMosaicsFromNamespace");

            var localVarPath = "/namespace/{namespaceId}/mosaics";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicsFromNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MosaicInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MosaicInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MosaicInfoDTO>)));
        }

        /// <summary>
        /// Get mosaics information Returns information for a given namespaceId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>Task of List&lt;MosaicInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<MosaicInfoDTO>> GetMosaicsFromNamespaceAsync (string namespaceId)
        {
             ApiResponse<List<MosaicInfoDTO>> localVarResponse = await GetMosaicsFromNamespaceAsyncWithHttpInfo(namespaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get mosaics information Returns information for a given namespaceId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which mosaics information should be retreived</param>
        /// <returns>Task of ApiResponse (List&lt;MosaicInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MosaicInfoDTO>>> GetMosaicsFromNamespaceAsyncWithHttpInfo (string namespaceId)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling MosaicRoutesApi->GetMosaicsFromNamespace");

            var localVarPath = "/namespace/{namespaceId}/mosaics";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicsFromNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MosaicInfoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MosaicInfoDTO>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MosaicInfoDTO>)));
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns names for mosaics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>List&lt;MosaicNameDTO&gt;</returns>
        public MosaicNameDTO[] GetMosaicsName (MosaicIds mosaicIds)
        {
             ApiResponse<MosaicNameDTO[]> localVarResponse = GetMosaicsNameWithHttpInfo(mosaicIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns names for mosaics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>ApiResponse of List&lt;MosaicNameDTO&gt;</returns>
        public ApiResponse< MosaicNameDTO[] > GetMosaicsNameWithHttpInfo (MosaicIds mosaicIds)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling MosaicRoutesApi->GetMosaicsName");

            var localVarPath = "/mosaic/names";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicsName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicNameDTO[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MosaicNameDTO[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicNameDTO[])));
        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns names for mosaics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of List&lt;MosaicNameDTO&gt;</returns>
        public async System.Threading.Tasks.Task<MosaicNameDTO[]> GetMosaicsNameAsync (MosaicIds mosaicIds)
        {
             ApiResponse<MosaicNameDTO[]> localVarResponse = await GetMosaicsNameAsyncWithHttpInfo(mosaicIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get readable names for a set of mosaics Returns names for mosaics
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="mosaicIds">Array of mosaicIds</param>
        /// <returns>Task of ApiResponse (List&lt;MosaicNameDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MosaicNameDTO[]>> GetMosaicsNameAsyncWithHttpInfo (MosaicIds mosaicIds)
        {
            // verify the required parameter 'mosaicIds' is set
            if (mosaicIds == null)
                throw new ApiException(400, "Missing required parameter 'mosaicIds' when calling MosaicRoutesApi->GetMosaicsName");

            var localVarPath = "/mosaic/names";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mosaicIds != null && mosaicIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mosaicIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mosaicIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMosaicsName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MosaicNameDTO[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MosaicNameDTO[]) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MosaicNameDTO[])));
        }

    }
}
