/* 
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: guillemchain@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using io.nem2.sdk.Infrastructure.HttpRepositories;
using io.nem2.sdk.Infrastructure.Imported.Api.Client;
using Newtonsoft.Json.Linq;
using RestSharp;

namespace io.nem2.sdk.Infrastructure.Imported.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal interface INamespaceRoutesApi : IApiAccessor
    {
        
        #region Asynchronous Operations
        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Returns information for a given namespaceId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which information should be retreived</param>
        /// <returns>Task of NamespaceInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> GetNamespaceAsync (string namespaceId);

        /// <summary>
        /// Get namespace information
        /// </summary>
        /// <remarks>
        /// Returns information for a given namespaceId
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which information should be retreived</param>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<JObject>> GetNamespaceAsyncWithHttpInfo (string namespaceId);
        /// <summary>
        /// Get namespaces an account owns
        /// </summary>
        /// <remarks>
        /// Returns information about the namespaces an account owns
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The account public key for which namespaces should be retrieved</param>
        /// <returns>Task of List&lt;NamespaceInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<JObject>> GetNamespacesFromAccountAsync (string publicKey, int? pageSize = null, string id = null);

        /// <summary>
        /// Get namespaces an account owns
        /// </summary>
        /// <remarks>
        /// Returns information about the namespaces an account owns
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The account public key for which namespaces should be retrieved</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> GetNamespacesFromAccountAsyncWithHttpInfo (string publicKey, int? pageSize = null, string id = null);
        /// <summary>
        /// Get namespaces information
        /// </summary>
        /// <remarks>
        /// Returns namespaces information for a given set of publicKeys
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKeys">Accounts public key array</param>
        /// <returns>Task of List&lt;NamespaceInfoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<JObject>> GetNamespacesFromAccountsAsync (JArray publicKeys, int? pageSize = null, string id = null);

        /// <summary>
        /// Get namespaces information
        /// </summary>
        /// <remarks>
        /// Returns namespaces information for a given set of publicKeys
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKeys">Accounts public key array</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceInfoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> GetNamespacesFromAccountsAsyncWithHttpInfo (JArray publicKeys, int? pageSize = null, string id = null);
        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns names for namespaces
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds">Array of namespaceIds</param>
        /// <returns>Task of List&lt;NamespaceNameDTO&gt;</returns>
        System.Threading.Tasks.Task<List<JObject>> GetNamespacesNamesAsync (JObject namespaceIds);

        /// <summary>
        /// Get readable names for a set of namespaces
        /// </summary>
        /// <remarks>
        /// Returns names for namespaces
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds">Array of namespaceIds</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceNameDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> GetNamespacesNamesAsyncWithHttpInfo (JObject namespaceIds);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    internal partial class NamespaceRoutesApi : INamespaceRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        internal NamespaceRoutesApi(string basePath)
        {
            Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        internal NamespaceRoutesApi(HttpRouter http, Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = Configuration.Default;
            else
                Configuration = configuration;

            if (http.Url == null) throw new NullReferenceException("Url cannot be null");
            Configuration.ApiClient = new ApiClient(http.Url);

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                Configuration.ApiClient.Configuration = Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<string, string> DefaultHeader()
        {
            return Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

       

        /// <summary>
        /// Get namespace information Returns information for a given namespaceId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which information should be retreived</param>
        /// <returns>Task of NamespaceInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetNamespaceAsync (string namespaceId)
        {
             ApiResponse<JObject> localVarResponse = await GetNamespaceAsyncWithHttpInfo(namespaceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get namespace information Returns information for a given namespaceId
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceId">The namespace id for which information should be retreived</param>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JObject>> GetNamespaceAsyncWithHttpInfo (string namespaceId)
        {
            // verify the required parameter 'namespaceId' is set
            if (namespaceId == null)
                throw new ApiException(400, "Missing required parameter 'namespaceId' when calling NamespaceRoutesApi->GetNamespace");

            var localVarPath = "/namespace/{namespaceId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceId != null) localVarPathParams.Add("namespaceId", Configuration.ApiClient.ParameterToString(namespaceId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JObject) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JObject)));
        }

       

        /// <summary>
        /// Get namespaces an account owns Returns information about the namespaces an account owns
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The account public key for which namespaces should be retrieved</param>
        /// <returns>Task of List&lt;NamespaceInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<JObject>> GetNamespacesFromAccountAsync(string publicKey, int? pageSize = null, string id = null)
        {
             ApiResponse<List<object>> localVarResponse = await GetNamespacesFromAccountAsyncWithHttpInfo(publicKey, pageSize, id);
             return localVarResponse.Data.Select(i => JObject.Parse(i.ToString())).ToList();

        }

        /// <summary>
        /// Get namespaces an account owns Returns information about the namespaces an account owns
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">The account public key for which namespaces should be retrieved</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetNamespacesFromAccountAsyncWithHttpInfo (string publicKey, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling NamespaceRoutesApi->GetNamespacesFromAccount");

            var localVarPath = "/account/{publicKey}/namespaces";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarPathParams.Add("publicKey", Configuration.ApiClient.ParameterToString(publicKey)); // path parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespacesFromAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

       
        /// <summary>
        /// Get namespaces information Returns namespaces information for a given set of publicKeys
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKeys">Accounts public key array</param>
        /// <returns>Task of List&lt;NamespaceInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<JObject>> GetNamespacesFromAccountsAsync(JArray publicKeys, int? pageSize = null, string id = null)
        {
             ApiResponse<List<object>> localVarResponse = await GetNamespacesFromAccountsAsyncWithHttpInfo(publicKeys, pageSize, id);
             return localVarResponse.Data.Select(i => JObject.Parse(i.ToString())).ToList(); ;

        }



        /// <summary>
        /// Get namespaces information Returns namespaces information for a given set of publicKeys
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKeys">Accounts public key array</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetNamespacesFromAccountsAsyncWithHttpInfo (JArray publicKeys, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKeys' is set
            if (publicKeys == null)
                throw new ApiException(400, "Missing required parameter 'publicKeys' when calling NamespaceRoutesApi->GetNamespacesFromAccounts");

            var localVarPath = "/account/namespaces";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKeys != null && publicKeys.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(publicKeys); // http body (model) parameter
            }
            else
            {
                localVarPostBody = publicKeys; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespacesFromAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }


        /// <summary>
        /// Get namespaces information Returns namespaces information for a given set of publicKeys
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKeys">Accounts public key array</param>
        /// <returns>Task of List&lt;NamespaceInfoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<JObject>> GetNamespacesFromAccountsAsync(JObject addresses, int? pageSize = null, string id = null)
        {
            ApiResponse<List<object>> localVarResponse = await GetNamespacesFromAccountsAsyncWithHttpInfo(addresses, pageSize, id);
            return localVarResponse.Data.Select(i => JObject.Parse(i.ToString())).ToList();

        }

        /// <summary>
        /// Get namespaces information Returns namespaces information for a given set of publicKeys
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKeys">Accounts public key array</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceInfoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetNamespacesFromAccountsAsyncWithHttpInfo(JObject addresses, int? pageSize = null, string id = null)
        {
            // verify the required parameter 'publicKeys' is set
            if (addresses == null)
                throw new ApiException(400, "Missing required parameter 'publicKeys' when calling NamespaceRoutesApi->GetNamespacesFromAccounts");

            var localVarPath = "/account/namespaces";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addresses != null && addresses.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(addresses); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addresses; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespacesFromAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        
        /// <summary>
        /// Get readable names for a set of namespaces Returns names for namespaces
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds">Array of namespaceIds</param>
        /// <returns>Task of List&lt;NamespaceNameDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<JObject>> GetNamespacesNamesAsync(JObject namespaceIds)
        {
             ApiResponse<List<object>> localVarResponse = await GetNamespacesNamesAsyncWithHttpInfo(namespaceIds);
             return localVarResponse.Data.Select(i => JObject.Parse(i.ToString())).ToList(); 

        }

        /// <summary>
        /// Get readable names for a set of namespaces Returns names for namespaces
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="namespaceIds">Array of namespaceIds</param>
        /// <returns>Task of ApiResponse (List&lt;NamespaceNameDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> GetNamespacesNamesAsyncWithHttpInfo (JObject namespaceIds)
        {
            // verify the required parameter 'namespaceIds' is set
            if (namespaceIds == null)
                throw new ApiException(400, "Missing required parameter 'namespaceIds' when calling NamespaceRoutesApi->GetNamespacesNames");

            var localVarPath = "/namespace/names";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = new string[] {
            };
            string localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null) localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (namespaceIds != null && namespaceIds.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(namespaceIds); // http body (model) parameter
            }
            else
            {
                localVarPostBody = namespaceIds; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNamespacesNames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

    }
}
